{"version":3,"sources":["utils.js","config.js","NFTItem.js","PercentSlider.js","NFTForm.js","ConnectButton.js","LoadingNFTItem.js","AlertSuccess.js","AlertError.js","App.js","reportWebVitals.js","index.js"],"names":["displayAddress","address","slice","length","nftreemarketaddress","nftaddress","NFTItem","id","tokenId","itemId","image","name","description","seller","price","allow_children","royalty_rate","child_min_royalty_rate","child_royalty_rate","depth","setIsNFTModalOpen","setParentItem","loadNFTs","setAlert","maxDepth2","nft","a","provider","ethers","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","NFTreeMarket","abi","utils","parseUnits","toString","createMarketSale","value","transaction","wait","isSuccess","message","className","getStarColor","src","alt","width","height","onClick","buyNFT","aria-hidden","PercentSlider","handleChange","percent","min","formatLabel","maxValue","minValue","onChange","client","ipfsHttpClient","NFTForm","setOpen","parentItem","min_percent","defaultState","useState","fileUrl","setFileUrl","formInput","updateFormInput","uploadingImage","setUploadingImage","e","file","target","files","add","progress","prog","console","log","added","url","path","listMarketItem","data","JSON","stringify","createMarketItem","isSucess","NFT","createToken","tx","event","events","args","toNumber","getListingPrice","listingPrice","Root","show","as","Fragment","onClose","Child","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Overlay","Title","htmlFor","type","autoComplete","rows","defaultValue","stroke","fill","viewBox","d","strokeWidth","strokeLinecap","strokeLinejoin","checked","ConnectButton","balance","handleConnectWallet","formatEther","toFixed","style","LoadingNFTItem","AlertSuccess","handleDismiss","ErrorAlert","App","isNFTModalOpen","nfts","setNfts","isLoaded","setIsLoaded","alert","setBalance","setAddress","request","method","addr","getBalance","tokenContract","marketContract","fetchMarketItems","Promise","all","map","i","tokenURI","tokenUri","axios","get","meta","formatUnits","item","owner","items","getMetaData","useEffect","on","accounts","updateAddressAndBalance","getWalletBalance","filters","MarketItemCreated","mark","nftContract","MarketItemSale","buyer","off","open","activateBrowserWallet","ndx","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6ef24ee.chunk.js","sourcesContent":["export const displayAddress = (address) => `${address.slice(0, 6)}...${address.slice(address.length - 4, address.length)}`","// Local Hardhat\n// export const nftreemarketaddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"\n// export const nftaddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\"\n\n// Ropsten\nexport const nftreemarketaddress = \"0xBfAe0028794548872e32B417226a20FefAFCD072\"\nexport const nftaddress = \"0x62b0B0B53A9868A2Fa87A02baC06476cB761E169\"","import { CurrencyDollarIcon, CloudDownloadIcon, StarIcon } from '@heroicons/react/solid'\nimport { displayAddress } from './utils'\nimport { ethers } from \"ethers\";\n\nimport {\n    nftaddress, nftreemarketaddress\n} from './config'\n\nimport NFTreeMarket from './artifacts/contracts/NFTreeMarket.sol/NFTreeMarket.json'\n\n\nexport default function NFTItem({ id, tokenId, itemId, image, name, description, seller, price, allow_children, royalty_rate, child_min_royalty_rate, child_royalty_rate, depth, setIsNFTModalOpen, setParentItem, loadNFTs, setAlert }) {\n\n    const getStarColor = (depth) => `text-${[\"yellow-400\", \"gray-200\", \"yellow-700\"][maxDepth2(depth)]}`\n    const maxDepth2 = (depth) => depth > 2 ? 2 : depth;\n\n    async function buyNFT(nft) {\n\n        const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n        const signer = provider.getSigner()\n\n        const contract = new ethers.Contract(nftreemarketaddress, NFTreeMarket.abi, signer)\n\n        // user will be prompted to pay the asking proces to complete the transaction\n        const price = ethers.utils.parseUnits(nft.price.toString(), 'ether')\n\n        try {\n            const transaction = await contract.createMarketSale(nftaddress, nft.itemId, {\n                value: price\n            })\n\n            await transaction.wait()\n            loadNFTs()\n\n        } catch (err) {\n            setAlert({ isSuccess: false, message: err.message })\n        }\n    }\n\n    return (\n        <div\n            key={id}\n            className=\"group relative bg-white border border-gray-200 rounded-lg flex flex-col overflow-hidden\"\n        >\n            <div className=\"aspect-w-3 aspect-h-4 bg-gray-200 group-hover:opacity-75 sm:aspect-none sm:h-96 max-h-72\">\n                <StarIcon className={`w-7 h-7 ${getStarColor(depth)} z-10 absolute top-1 right-1`} />\n                <img\n                    src={image}\n                    alt={\"blehhh\"}\n                    className=\"w-full h-full object-center object-cover sm:w-full sm:h-full\"\n                />\n            </div>\n            <div className=\"divide-y divide-gray-500\">\n                <div className=\"mt-1 p-2\">\n                    <div className=\"flex items-center justify-between text-base font-medium text-gray-500\">\n                        <p className=\"text-sm italic text-gray-500\">{displayAddress(seller)}</p>\n                        <p className=\"text-sm italic text-gray-500\">Price<span className=\"not-italic ml-2 mr-2\">-</span>Royalty</p>\n                    </div>\n                    <div className=\"flex items-center justify-between text-base font-medium text-gray-700\">\n                        <h3>{name}</h3>\n                        <p>\n                            {price}\n                            <img className=\"inline-block align-middle ml-1 mr-2 mb-1\" src=\"ethereum.svg\" alt=\"ethereum.svg\" width=\"9px\" height=\"9px\" />\n                            -\n                            <img className=\"inline-block align-middle ml-2 mr-1 mb-1\" src=\"crown.svg\" alt=\"crown.svg\" width=\"15px\" height=\"15px\" />\n                            {`${royalty_rate / 100}%`}\n\n                        </p>\n                    </div>\n                </div>\n\n\n                <div>\n                    {/* Bottom buttons to buy or branch */}\n                    <div className=\"-mt-px flex divide-x divide-gray-800\">\n                        <div className=\"w-0 flex-1 flex\">\n                            <button\n                                onClick={() => {\n                                    buyNFT({ itemId, price });\n                                }}\n                                className=\"relative -mr-px w-0 flex-1 bg-gray-100 hover:bg-gray-50 inline-flex items-center justify-center py-4 text-sm text-gray-500 font-medium border border-transparent rounded-bl-lg hover:text-gray-500\"\n                            >\n                                <CurrencyDollarIcon className=\"w-5 h-5 text-white-400\" aria-hidden=\"true\" />\n                                <span className=\"ml-3\">Buy</span>\n                            </button>\n                        </div>\n                        {\n                            allow_children && (\n                                <div className=\"-ml-px w-0 flex-1 flex\">\n                                    <button\n                                        onClick={() => {\n                                            setParentItem({ id, tokenId, itemId, image, name, description, seller, price, allow_children, depth, royalty_rate, child_min_royalty_rate, child_royalty_rate })\n                                            setIsNFTModalOpen(true)\n                                        }}\n                                        className=\"relative w-0 flex-1 bg-gray-100 hover:bg-gray-50 inline-flex items-center justify-center py-4 text-sm text-green-600 font-medium border border-transparent rounded-br-lg hover:text-green-500\"\n                                    >\n                                        <CloudDownloadIcon className=\"w-5 h-5 text-white-400\" aria-hidden=\"true\" />\n                                        <span className=\"ml-3\">Branch</span>\n\n                                    </button>\n                                </div>\n                            )\n                        }\n                    </div>\n                </div>\n            </div>\n\n        </div >\n    )\n}\n\n","import InputRange from 'react-input-range';\n\nexport default function PercentSlider({ handleChange, percent, min }) {\n    return (\n        <div className='slider custom-labels content-center mb-8 mt-8'>\n            <InputRange\n                formatLabel={value => value + '%'}\n                maxValue={100}\n                minValue={min}\n                value={percent}\n                onChange={handleChange} />\n        </div>\n    )\n}","import { Fragment, useState } from 'react'\nimport { Dialog, Transition } from '@headlessui/react'\nimport { ethers } from \"ethers\";\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\nimport PercentSlider from './PercentSlider'\n\nimport {\n  nftaddress, nftreemarketaddress\n} from './config'\n\nimport NFT from './artifacts/contracts/NFT.sol/NFT.json'\nimport NFTreeMarket from './artifacts/contracts/NFTreeMarket.sol/NFTreeMarket.json'\n\n\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\n\nexport default function NFTForm({ setOpen, parentItem, setParentItem, loadNFTs, setAlert }) {\n\n\n  const min_percent = parentItem ? parentItem.child_min_royalty_rate / 100 : 0;\n\n  const defaultState = { name: \"\", description: \"\", price: \"0\", royalty_rate: min_percent, allow_children: false, child_min_royalty_rate: min_percent, child_royalty_rate: 0 };\n\n  const [fileUrl, setFileUrl] = useState(null)\n  const [formInput, updateFormInput] = useState(defaultState)\n  const [uploadingImage, setUploadingImage] = useState(false);\n\n\n  async function onFileUpload(e) {\n\n    setUploadingImage(true);\n    const file = e.target.files[0]\n    try {\n      const added = await client.add(\n        file,\n        {\n          progress: (prog) => console.log(`File Upload Received: ${prog}`)\n        }\n      )\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`\n\n      setFileUrl(url)\n    } catch (err) {\n      setAlert({ isSuccess: false, message: err.message })\n    }\n\n    setUploadingImage(false);\n  }\n\n  async function listMarketItem() {\n\n    const { name, description, price, royalty_rate, allow_children, child_min_royalty_rate, child_royalty_rate } = formInput\n\n    if (!name || !description || !price || !fileUrl || !royalty_rate || (allow_children && (!child_min_royalty_rate || !child_royalty_rate))) {\n      return false;\n    }\n\n    // first, upload to IPFS \n    const data = JSON.stringify({\n      name, description, image: fileUrl, depth: parentItem ? parentItem.depth + 1 : 0\n    })\n    try {\n      const added = await client.add(data)\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`\n      // after file is uploaded to IPFS, pass the URL to save it on Polygon \n      createMarketItem(url)\n    } catch (err) {\n      setAlert({ isSucess: false, message: err.message })\n    }\n\n    return true;\n  }\n\n  async function createMarketItem(url) {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n\n    const signer = provider.getSigner()\n\n    // next, create the item \n    let contract = new ethers.Contract(nftaddress, NFT.abi, signer)\n    let transaction = await contract.createToken(url)\n    let tx = await transaction.wait()\n    let event = tx.events[0]\n    let value = event.args[2]\n    let tokenId = value.toNumber()\n\n    // then list the item for sale on the marketplace \n    contract = new ethers.Contract(nftreemarketaddress, NFTreeMarket.abi, signer)\n\n    let listingPrice = await contract.getListingPrice()\n\n    const { price, royalty_rate, allow_children, child_min_royalty_rate, child_royalty_rate } = formInput\n\n    try {\n      transaction = await contract.createMarketItem(\n        nftaddress,\n        tokenId,\n        ethers.utils.parseUnits(price, 'ether'),\n        parentItem ? parentItem.itemId : 0,\n        royalty_rate * 100,\n        allow_children,\n        child_min_royalty_rate * 100,\n        child_royalty_rate * 100,\n        { value: listingPrice.toString() }\n      )\n\n      await transaction.wait()\n\n      loadNFTs();\n    } catch (err) {\n      setAlert({ isSuccess: false, message: err.message })\n    }\n\n    return true;\n  }\n\n  return (\n    <Transition.Root show={true} as={Fragment}>\n      <Dialog as=\"div\" className=\"fixed z-10 inset-0 overflow-y-auto\" onClose={() => { setOpen(false); setParentItem(null); }}>\n        <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-300\"\n            enterFrom=\"opacity-0\"\n            enterTo=\"opacity-100\"\n            leave=\"ease-in duration-200\"\n            leaveFrom=\"opacity-100\"\n            leaveTo=\"opacity-0\"\n          >\n            <Dialog.Overlay className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" />\n          </Transition.Child>\n\n          {/* This element is to trick the browser into centering the modal contents. */}\n          <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">\n            &#8203;\n          </span>\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-300\"\n            enterFrom=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n            enterTo=\"opacity-100 translate-y-0 sm:scale-100\"\n            leave=\"ease-in duration-200\"\n            leaveFrom=\"opacity-100 translate-y-0 sm:scale-100\"\n            leaveTo=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n          >\n            <div className=\"inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\n              <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\n                <div className=\"sm:flex sm:items-start\">\n                  <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\n                    <Dialog.Title as=\"h3\" className=\"text-lg leading-6 font-medium text-gray-900\">\n                      {parentItem ? \"Create a Branch\" : \"Create a Root\"}\n                    </Dialog.Title>\n                    <div className=\"mt-2\">\n                      <form className=\"space-y-8 divide-y divide-gray-200\">\n                        <div className=\"space-y-8 divide-y divide-gray-200 sm:space-y-5\">\n\n                          <div className=\"mt-6 sm:mt-5 space-y-6 sm:space-y-5\">\n\n                            <div className=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5\">\n                              <label htmlFor=\"title\" className=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                                Title\n                              </label>\n                              <div className=\"mt-1 sm:mt-0 sm:col-span-2\">\n                                <input\n                                  type=\"text\"\n                                  name=\"title\"\n                                  id=\"title\"\n                                  autoComplete=\"title\"\n                                  className=\"max-w-lg block w-full shadow-sm focus:ring-green-600 focus:border-green-600 sm:max-w-xs sm:text-sm border-gray-300 rounded-md\"\n                                  onChange={e => updateFormInput({ ...formInput, name: e.target.value })}\n                                />\n                              </div>\n                            </div>\n\n                            <div className=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5\">\n                              <label htmlFor=\"about\" className=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                                Description\n                              </label>\n                              <div className=\"mt-1 sm:mt-0 sm:col-span-2\">\n                                <textarea\n                                  id=\"about\"\n                                  name=\"about\"\n                                  rows={3}\n                                  className=\"max-w-lg shadow-sm block w-full focus:ring-green-600 focus:border-green-600 sm:text-sm border border-gray-300 rounded-md\"\n                                  defaultValue={''}\n                                  onChange={e => updateFormInput({ ...formInput, description: e.target.value })}\n                                />\n                                <p className=\"mt-2 text-sm text-gray-500\">Write something about the piece.</p>\n                              </div>\n                            </div>\n\n                            <div className=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:pt-5\">\n                              <label htmlFor=\"cover-photo\" className=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                                Media\n                              </label>\n                              <div className=\"mt-1 sm:mt-0 sm:col-span-2\">\n                                <div className={`max-w-lg flex justify-center px-6 pt-5 pb-6 border-2 ${uploadingImage ? \"sm:border-green-600 animate-pulse\" : \"sm:border-gray-300\"} border-dashed rounded-md`}>\n\n                                  <div className=\"space-y-1 text-center\">\n                                    <svg\n                                      className={`mx-auto h-12 w-12 ${uploadingImage ? \"animate-pulse text-green-600\" : \"text-gray-400\"}`}\n                                      stroke={uploadingImage ? \"#079669\" : \"currentColor\"}\n                                      fill=\"none\"\n                                      viewBox=\"0 0 48 48\"\n                                      aria-hidden=\"true\"\n                                    >\n                                      <path\n                                        d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\"\n                                        strokeWidth={2}\n                                        strokeLinecap=\"round\"\n                                        strokeLinejoin=\"round\"\n                                      />\n                                    </svg>\n\n\n                                    {fileUrl && (<p className=\"text-green-600\">{fileUrl.length > 20 ? `${fileUrl.slice(0, 6)}...${fileUrl.slice(fileUrl.length - 4, fileUrl.length)}` : fileUrl}</p>)}\n\n                                    <div className=\"flex text-sm text-gray-600\">\n                                      <label\n                                        htmlFor=\"file-upload\"\n                                        className=\"relative cursor-pointer bg-white rounded-md font-medium text-green-600 hover:text-green-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-green-500\"\n                                      >\n                                        <span>Upload a file</span>\n                                        <input id=\"file-upload\" name=\"file-upload\" type=\"file\" className=\"sr-only\" onChange={onFileUpload} />\n                                      </label>\n                                      <p className=\"pl-1\">or drag and drop</p>\n                                    </div>\n\n\n                                    <p className=\"text-xs text-gray-500\">PNG, JPG, GIF up to 10MB</p>\n                                  </div>\n\n\n                                </div>\n                              </div>\n                            </div>\n\n                            <div className=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5\">\n                              <label htmlFor=\"price\" className=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                                Price\n                              </label>\n                              <div className=\"mt-1 sm:mt-0 sm:col-span-2\">\n                                <input\n                                  type=\"text\"\n                                  name=\"price\"\n                                  id=\"price\"\n                                  autoComplete=\"price\"\n                                  className=\"max-w-lg block w-full shadow-sm focus:ring-green-600 focus:border-green-600 sm:max-w-xs sm:text-sm border-gray-300 rounded-md\"\n                                  onChange={e => updateFormInput({ ...formInput, price: e.target.value })}\n                                />\n                              </div>\n                            </div>\n\n                            <div className=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5\">\n                              <label htmlFor=\"royaly-rate\" className=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                                Royalty Rate\n                              </label>\n                              <div className=\"mt-1 sm:mt-0 sm:col-span-2\">\n                                <PercentSlider handleChange={value => updateFormInput({ ...formInput, royalty_rate: value })} percent={formInput.royalty_rate} min={parentItem ? parentItem.child_min_royalty_rate / 100 : 0} />\n                              </div>\n                            </div>\n\n                            <div className=\"sm:grid sm:grid-cols-2 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5 flex items-center justify-between\">\n                              <div className=\"flex items-center col-span-1\">\n                                <input\n                                  id=\"allow-children\"\n                                  name=\"allow-children\"\n                                  type=\"checkbox\"\n                                  className=\"h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded\"\n                                  onChange={e => { updateFormInput({ ...formInput, allow_children: e.target.checked }) }}\n                                  checked={formInput.allow_children}\n                                />\n                                <label htmlFor=\"remember-me\" className=\"ml-2 block text-sm text-gray-900\">\n                                  Allow Branches?\n                                </label>\n                              </div>\n\n                              {\n                                formInput.allow_children ? (\n                                  <>\n                                    <div className=\"col-span-2\">\n                                      <label htmlFor=\"child-royalty-rate\" className=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                                        Branch Minimum Royalty Requirement\n                                      </label>\n                                      <div className=\"mt-1 sm:mt-0 \">\n                                        <PercentSlider handleChange={value => updateFormInput({ ...formInput, child_min_royalty_rate: value })} percent={formInput.child_min_royalty_rate} min={parentItem ? parentItem.child_min_royalty_rate / 100 : 0} />\n                                        <p className=\"mt-2 text-sm text-gray-500\">A minimum royalty that branches must list with</p>\n                                      </div>\n                                    </div>\n\n                                    <div className=\"col-span-2 sm:border-t\">\n                                      <label htmlFor=\"child-royalty-rate\" className=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                                        Branch Royalty Rate\n                                      </label>\n                                      <div className=\"mt-1 sm:mt-0 \">\n                                        <PercentSlider handleChange={value => updateFormInput({ ...formInput, child_royalty_rate: value })} percent={formInput.child_royalty_rate} min={0} />\n                                        <p className=\"mt-2 text-sm text-gray-500\">The percentage of branch royalties you desire</p>\n\n\n                                      </div>\n                                    </div>\n\n                                  </>\n                                ) : null\n                              }\n\n                            </div>\n\n                          </div >\n\n                        </div>\n\n                      </form >\n\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\n                <button\n                  type=\"button\"\n                  className=\"w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-green-600 text-base font-medium text-white hover:bg-green-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 sm:ml-3 sm:w-auto sm:text-sm\"\n                  onClick={async () => {\n                    if (await listMarketItem()) {\n                      setOpen(false);\n                      setParentItem(null);\n                    }\n                  }}\n                >\n                  Create\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\"\n                  onClick={() => {\n                    setOpen(false);\n                    setParentItem(null);\n                  }}\n                >\n                  Cancel\n                </button>\n              </div>\n            </div>\n          </Transition.Child>\n        </div>\n      </Dialog>\n    </Transition.Root>\n  )\n}\n\n","import { ethers } from \"ethers\";\nimport { Jazzicon } from '@ukstv/jazzicon-react';\nimport { displayAddress } from './utils';\n\nexport default function ConnectButton({ address, balance, handleConnectWallet }) {\n    /*async function changeAccounts() {\n        await window.ethereum.request({\n            method: \"wallet_requestPermissions\",\n            params: [\n                {\n                    eth_accounts: {}\n                }\n            ]\n        });\n    }*/\n\n    return address ? (\n        <div /*onClick={changeAccounts}*/ className=\"px-2 bg-gray-300 shadow rounded-lg overflow-hidden py-1\">\n            <div className=\"px-2 py-1 mr-1 text-gray-500 inline-block align-middle\">{`${(+ethers.utils.formatEther(balance)).toFixed(4)} ETH`}</div>\n            <div className=\"px-2 py-1 bg-gray-100 text-gray-500 shadow rounded-lg overflow-hidden inline-block align-middle\">\n                {\n                    displayAddress(address)\n                }\n                <div className=\"inline-block align-middle ml-1 mb-2\" style={{ width: '1rem', height: '1rem' }}>\n                    <Jazzicon address={address} />\n                </div>\n            </div>\n        </div>\n    ) : (\n        <button onClick={handleConnectWallet} type=\"button\" className=\"w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-green-600 text-base font-medium text-white hover:bg-green-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-600 sm:w-auto sm:text-sm\">Connect Wallet</button>\n    )\n}","import { CurrencyDollarIcon, CloudDownloadIcon, StarIcon } from '@heroicons/react/solid'\nimport { displayAddress } from './utils'\n\nexport default function LoadingNFTItem() {\n\n    return (\n        <div\n            className=\"animate-pulse border-green-600 group bg-green-600 text-green-600 relative border-2 opacity-10 rounded-lg flex flex-col overflow-hidden\"\n        >\n            <div className=\"aspect-w-3 aspect-h-4 bg-gray-200 opacity-75 sm:aspect-none sm:h-96 max-h-72\">\n                <StarIcon className={`w-7 h-7 z-10 absolute top-1 right-1`} />\n            </div>\n            <div className=\"divide-y divide-gray-500 bg-gray-200\">\n                <div className=\"mt-1 p-2 opacity-100\">\n                    <div className=\"flex items-center justify-between text-base font-medium\">\n                        <p className=\"text-sm italic \">{displayAddress(\"0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65\")}</p>\n                        <p className=\"text-sm italic \">Price</p>\n                    </div>\n                    <div className=\"flex items-center justify-between text-base font-medium\">\n                        <h3>{\"NFTree\"}</h3>\n                        <p>\n                            {0.0}\n                            <img className=\"inline-block aligne-middle ml-1 mb-1\" src=\"ethereum.svg\" alt=\"ethereum.svg\" width=\"9px\" height=\"9px\" />\n                        </p>\n                    </div>\n                </div>\n                <div className=\"opacity-75\">\n                    {/* Bottom buttons to buy or branch */}\n                    <div className=\"-mt-px flex divide-x divide-gray-800\">\n                        <div className=\"w-0 flex-1 flex\">\n                            <button\n                                className=\"relative -mr-px w-0 flex-1 bg-gray-200 opacity-75 inline-flex items-center justify-center py-4 text-sm font-medium border border-transparent rounded-bl-lg\"\n                            >\n                                <CurrencyDollarIcon className=\"w-5 h-5 text-white-400\" aria-hidden=\"true\" />\n                                <span className=\"ml-3\">Buy</span>\n                            </button>\n                        </div>\n\n                        <div className=\"-ml-px w-0 flex-1 flex\">\n                            <button\n                                className=\"relative w-0 flex-1 bg-gray-200 opacity-75 inline-flex items-center justify-center py-4 text-sm  font-medium border border-transparent rounded-br-lg \"\n                            >\n                                <CloudDownloadIcon className=\"w-5 h-5 text-white-400\" aria-hidden=\"true\" />\n                                <span className=\"ml-3\">Branch</span>\n\n                            </button>\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n\n        </div >\n    )\n}\n","import { CheckCircleIcon, XIcon } from '@heroicons/react/solid'\n\nexport default function AlertSuccess({ message, handleDismiss }) {\n  return (\n    <div className=\"rounded-md bg-green-50 p-4 z-20\">\n      <div className=\"flex\">\n        <div className=\"flex-shrink-0\">\n          <CheckCircleIcon className=\"h-5 w-5 text-green-400\" aria-hidden=\"true\" />\n        </div>\n        <div className=\"ml-3\">\n          <p className=\"text-sm font-medium text-green-800\">{message}</p>\n        </div>\n        <div className=\"ml-auto pl-3\">\n          <div className=\"-mx-1.5 -my-1.5\">\n            <button\n              type=\"button\"\n              onClick={handleDismiss}\n              className=\"inline-flex bg-green-50 rounded-md p-1.5 text-green-500 hover:bg-green-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-green-50 focus:ring-green-600\"\n            >\n              <span className=\"sr-only\">Dismiss</span>\n              <XIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import { XCircleIcon, XIcon } from '@heroicons/react/solid'\n\nexport default function ErrorAlert({ message, handleDismiss }) {\n    return (\n        <div className=\"rounded-md bg-red-50 p-4 z-20\">\n            <div className=\"flex\">\n                <div className=\"flex-shrink-0\">\n                    <XCircleIcon className=\"h-5 w-5 text-red-400\" aria-hidden=\"true\" />\n                </div>\n                <div className=\"ml-3\">\n                    <h3 className=\"text-sm font-medium text-red-800\">{message}</h3>\n                    {/*<div className=\"mt-2 text-sm text-red-700\">\n                        <ul role=\"list\" className=\"list-disc pl-5 space-y-1\">\n                            <li>Your password must be at least 8 characters</li>\n                            <li>Your password must include at least one pro wrestling finishing move</li>\n                        </ul>\n    </div>*/}\n                </div>\n                <div className=\"ml-auto pl-3\">\n                    <div className=\"-mx-1.5 -my-1.5\">\n                        <button\n                            type=\"button\"\n                            onClick={handleDismiss}\n                            className=\"inline-flex bg-red-50 rounded-md p-1.5 text-red-500 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-red-50 focus:ring-red-600\"\n                        >\n                            <span className=\"sr-only\">Dismiss</span>\n                            <XIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","/* This example requires Tailwind CSS v2.0+ */\nimport { useEffect, useState } from 'react'\nimport { Disclosure } from '@headlessui/react'\nimport { ethers } from \"ethers\";\nimport axios from 'axios'\nimport NFTItem from './NFTItem';\nimport NFTForm from './NFTForm';\nimport ConnectButton from './ConnectButton';\nimport LoadingNFTItem from './LoadingNFTItem';\nimport AlertSuccess from './AlertSuccess';\nimport AlertError from './AlertError';\n\nimport 'react-input-range/lib/css/index.css';\nimport './App.css';\n\nimport {\n    nftaddress, nftreemarketaddress\n} from './config'\n\nimport NFT from './artifacts/contracts/NFT.sol/NFT.json'\nimport NFTreeMarket from './artifacts/contracts/NFTreeMarket.sol/NFTreeMarket.json'\n\nlet provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n\nexport default function App() {\n\n    const [isNFTModalOpen, setIsNFTModalOpen] = useState(false);\n    const [nfts, setNfts] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [parentItem, setParentItem] = useState(null);\n    const [alert, setAlert] = useState(null);\n    const [balance, setBalance] = useState(0);\n    const [address, setAddress] = useState(null);\n\n\n    if (!provider) {\n        provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n    }\n\n    // Connect wallet functionality\n    async function activateBrowserWallet() {\n        if (window.ethereum) {\n            try {\n\n                const [addr] = await window.ethereum.request({ method: 'eth_requestAccounts' });\n\n                let balance = await provider.getBalance(addr);\n\n                setAddress(addr);\n                setBalance(balance);\n            } catch (err) {\n                setAlert({ isSuccess: false, message: err.message });\n            }\n        }\n    }\n\n    // Update address and balance state upon account change detected\n    useEffect(() => {\n        async function updateAddressAndBalance(addr) {\n            if (addr) {\n                let balance = await provider.getBalance(addr);\n\n                setAddress(addr);\n                setBalance(balance)\n            }\n        }\n\n        if (window.ethereum) {\n            window.ethereum.on('accountsChanged', (accounts) => {\n                const [addr] = accounts;\n                updateAddressAndBalance(addr);\n            })\n        }\n    }, []);\n\n\n    async function loadNFTs() {\n        // create a generic provider and query for unsold market items\n        if (!provider) { provider = new ethers.providers.Web3Provider(window.ethereum, \"any\"); }\n        //const provider = new ethers.providers.JsonRpcProvider()\n        const tokenContract = new ethers.Contract(nftaddress, NFT.abi, provider)\n        const marketContract = new ethers.Contract(nftreemarketaddress, NFTreeMarket.abi, provider)\n        const data = await marketContract.fetchMarketItems()\n\n        const items = await Promise.all(data.map(async i => {\n            const tokenUri = await tokenContract.tokenURI(i.tokenId)\n            const meta = await axios.get(tokenUri)\n            let price = ethers.utils.formatUnits(i.price.toString(), 'ether')\n            let item = {\n                price,\n                tokenId: i.tokenId.toNumber(),\n                itemId: i.itemId.toNumber(),\n                seller: i.seller,\n                owner: i.owner,\n                image: meta.data.image,\n                name: meta.data.name,\n                description: meta.data.description,\n                depth: meta.data.depth,\n                allow_children: i.allow_children,\n                royalty_rate: i.royalty_rate,\n                child_min_royalty_rate: i.child_min_royalty_rate,\n                child_royalty_rate: i.child_royalty_rate\n            }\n            return item\n        }))\n\n        setNfts(items);\n        setIsLoaded(true);\n    }\n\n    // Load NFTs when first hitting page\n    useEffect(() => {\n        loadNFTs()\n    }, [])\n\n    // Setup event listeners\n    useEffect(() => {\n        async function getWalletBalance(address) {\n            if (provider && address) {\n                try {\n                    setBalance(await provider.getBalance(address))\n                } catch (error) {\n                    console.log(error)\n                }\n            }\n        }\n\n        const marketContract = new ethers.Contract(nftreemarketaddress, NFTreeMarket.abi, provider);\n\n        if (address) {\n            marketContract.filters.MarketItemCreated(address);\n        }\n\n        // listen to market item creations\n        marketContract.on(\"MarketItemCreated\", async (seller, itemId, nftContract, tokenId) => {\n\n            if (address) {\n                getWalletBalance(address);\n            }\n\n            try {\n                let meta = await getMetaData(tokenId);\n\n                setAlert({\n                    isSuccess: true,\n                    message: `'${meta.data.name}' is now listed on the market`,\n                });\n            } catch (err) {\n                setAlert({ isSuccess: false, message: err.message })\n            }\n        }, []);\n\n        if (address) {\n            marketContract.filters.MarketItemSale(address, address);\n        }\n\n        // Listen to market item sales\n        marketContract.on(\"MarketItemSale\", async (buyer, seller, itemId, nftContract, tokenId) => {\n\n            if (address) {\n                getWalletBalance(address);\n            }\n\n            try {\n                let meta = await getMetaData(tokenId);\n\n                setAlert({\n                    isSuccess: true,\n                    message: `'${meta.data.name}' has been purchased from the market`,\n                });\n            } catch (err) {\n                setAlert({ isSuccess: false, message: err.message })\n            }\n        });\n\n        // Returns listener clean up function\n        return () => {\n            marketContract.off(\"MarketItemCreated\");\n            marketContract.off(\"MarketItemSale\");\n        };\n    }, [address])\n\n    // Gets meta data for a given nft's tokenId\n    async function getMetaData(tokenId) {\n        if (!provider) { provider = new ethers.providers.Web3Provider(window.ethereum, \"any\"); }\n\n        const tokenContract = new ethers.Contract(nftaddress, NFT.abi, provider)\n\n        const tokenUri = await tokenContract.tokenURI(tokenId)\n        const meta = await axios.get(tokenUri)\n\n        return meta;\n    }\n\n    return (\n        <>\n            <div className=\"min-h-full\">\n                <Disclosure as=\"nav\" className=\"bg-gray-100\">\n                    {({ open }) => (\n                        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n                            <div className=\"flex items-center justify-between h-16\">\n                                <div className=\"flex items-center\">\n                                    <div className=\"flex-nowrap\">\n                                        <img className=\"h-6 mb-3 inline-block\" src=\"palm-tree.svg\" alt=\"nftree_logo.png\" />\n                                        <span className=\"h-8 text-2xl text-green-600\">NFTree</span>\n                                    </div>\n                                </div>\n                                <div className=\"md:block\">\n                                    <ConnectButton address={address} balance={balance} handleConnectWallet={() => { activateBrowserWallet() }} />\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </Disclosure>\n\n                <header className=\"\">\n                    <div className=\"flex max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8 justify-center\">\n                        <button onClick={() => setIsNFTModalOpen(true)} type=\"button\" className=\"self-center w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-green-600 text-base font-medium text-white hover:bg-green-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-600 sm:w-auto sm:text-sm\">Create a NFTree</button>\n                    </div>\n                </header>\n                <main>\n                    <div className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\n                        <div className=\"px-4 py-4 sm:px-0\">\n                            <div className=\"grid grid-cols-1 gap-y-4 sm:grid-cols-2 sm:gap-x-6 sm:gap-y-10 lg:gap-x-8 xl:grid-cols-3\">\n                                {\n                                    isLoaded ?\n                                        (\n                                            nfts.length ?\n                                                nfts.map((nft, ndx) => <NFTItem key={ndx} {...nft} setIsNFTModalOpen={setIsNFTModalOpen} setParentItem={setParentItem} loadNFTs={loadNFTs} setAlert={setAlert} />)\n                                                :\n                                                null\n                                        )\n                                        :\n                                        (\n                                            [0, 0, 0, 0].map((placeholder, ndx) => <LoadingNFTItem key={ndx} />)\n                                        )\n                                }\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"fixed inset-x-0 bottom-3 w-90 justify-center content-center\">\n                        <div className=\"w-2/6 m-auto\">\n                            {\n                                alert ? (\n                                    alert.isSuccess ?\n                                        <AlertSuccess message={alert.message} handleDismiss={() => { setAlert(null); }} />\n                                        :\n                                        <AlertError message={alert.message} handleDismiss={() => { setAlert(null); }} />\n                                )\n                                    :\n                                    null\n                            }\n                        </div>\n                    </div>\n\n                    {\n                        isNFTModalOpen &&\n                        <NFTForm setOpen={setIsNFTModalOpen} parentItem={parentItem} setParentItem={setParentItem} loadNFTs={loadNFTs} setAlert={setAlert} />\n                    }\n\n                </main>\n            </div >\n        </>\n    )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}